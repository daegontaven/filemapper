{
  "name": "Filemapper",
  "tagline": "Module to handle automatic variable naming, multiple files and some file acrobatics in python",
  "body": "filemapper\r\n==========\r\n\r\n[![image]]\r\n\r\n[![image][1]]\r\n\r\n[![image][2]]\r\n\r\nThis module is designed to create variables for files that are to be\r\naccessed collectively. Since files tend to take up a lot of memory, it\r\nis not advised to use this module to keep multiple files in a directory\r\nopen. The mapper works by creating variables with same file name and\r\nmaps them(Do not confuse this for the built-in maps() function) to their\r\nfile location. These variables can then be accessed like regular files\r\nusing read(). All the functions defined here return a tuple of\r\nsuccessfully processed files.\r\n\r\nCompatability\r\n-------------\r\n\r\nTested Combinations:  \r\n-   Windows 10/8/7\r\n-   Most Linux Distros\r\n-   Python (3.5,3.4,2.7)\r\n\r\nUsing this module in any combination other than those listed above may\r\nproduce unexpected results.\r\n\r\nUnfortunately this module is currently incompatable with OSX, so do not\r\ninstall it without proper undertsanding of the source code.\r\n\r\nInstallation\r\n------------\r\n\r\n    pip install filemapper\r\n\r\n### Usage\r\n\r\n    >>>import filemapper as fm\r\n    >>>help(fm) #This will display help for this module\r\n\r\n#### Creating variables\r\n\r\n    >>>import filemapper as fm\r\n    >>>print fm.create('resources') #Creates variables for files within the folder resources\r\n    {'nouns.dat':u'resources\\\\nouns.dat','adjectives.dat':u'resources\\\\adjectives.dat'}\r\n    >>>f = open(fm.read('nouns.dat')) #Passed into read() before it can be used.\r\n    >>>for i in f:print i #Prints out the whole 'nouns.dat'\r\n    A-bomb\r\n    A-bombs\r\n    A-frame\r\n    [Trunctuated 90959 Lines]\r\n    zymurgy\r\n\r\nExample Case\r\n\r\n    >>>f = fm.create('resources')\r\n    >>>new_f = [sub_f[0] for sub_f in f.items()]\r\n    >>>for i in new_f: #Only prints the content of files that start with 'a'\r\n    ...    if i[0] == 'a':\r\n    ...        for x in  open(i, 'r'):print x\r\n    [Stdout Ommitted due to large size]\r\n\r\n#### Loading Files\r\n\r\n    >>>print fm.load('resources','w') #Omittiing the second argument will default to read only mode\r\n    ('nouns.dat','adjectives.dat')\r\n    >>>for i in fm.read('nouns.dat'):print i\r\n    [Stdout Ommitted due to large size]\r\n\r\n#### Closing Files\r\n\r\n    >>>fm.close('nouns.dat')\r\n    ('adjectives.dat')\r\n    >>>fm.close() #Closes all the files\r\n\r\n  [image]: https://img.shields.io/travis/daegontaven/filemapper/master.svg?maxAge=2592000?style=plastic\r\n  [![image]]: https://travis-ci.org/daegontaven/filemapper\r\n  [1]: https://img.shields.io/codecov/c/github/daegontaven/filemapper.svg?maxAge=2592000?style=plastic\r\n  [![image][1]]: https://codecov.io/gh/daegontaven/filemapper\r\n  [2]: https://img.shields.io/pypi/v/filemapper.svg?maxAge=2592000?style=plastic\r\n  [![image][2]]: https://pypi.python.org/pypi/filemapper",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}